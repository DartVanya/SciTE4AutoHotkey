#Requires AutoHotkey v2-b+
#Include "Common.ahk"

FileEncoding "UTF-8-RAW"
SetWorkingDir A_ScriptDir "\..\source"

if A_PtrSize != 4 {
	MsgBox "This script only works with the 32-bit version of AutoHotkey."
	ExitApp
}

g_ahk2DocsPath := A_WorkingDir "\..\..\AutoHotkey_v1_Docs"

sc := ComObject("ScriptControl"), sc.Language := "JScript"
sc.AddCode(FileRead(g_ahk2DocsPath "\docs\static\source\data_index.js"))
ji := sc.Eval("indexData")
if !ji || !ji.length
	throw Error("Failed to read/parse data_index.js")

g_directives := Set()
g_controlFlow := Set()
g_reserved := Set(
	"true", "false", "base", "extends", "__Get", "__Set", "__Call", "__Delete", "__New",
	"Parse", "Files", "Read", "Reg",
	"ahk_id", "ahk_class", "ahk_pid", "ahk_exe", "ahk_group",
)
g_knownVars := Set("this")
g_knownFuncs := Set()
g_knownCmds := Set()

ignoreKeywords := Set("default")

Loop ji.length {
	item_name := ji.%A_Index-1%.0
	item_path := ji.%A_Index-1%.1
	try item_type := ji.%A_Index-1%.2
	catch Any
		item_type := -1

	if !RegExMatch(item_name, "^(#?[a-zA-Z_][0-9a-zA-Z_]*)", &o) or ignoreKeywords.Has(o[1])
		continue

	/*
	0 - directive
	1 - built-in var
	2 - built-in function
	3 - control flow statement
	4 - operator
	5 - declaration
	6 - command
	99 - Ahk2Exe compiler
	*/

	item_name := o[1]
	switch item_type {
		; Directives
		case 0:   g_directives.Add   SubStr(item_name, 2) ; remove initial #
		case 1:   g_knownVars.Add    item_name
		case 2:   g_knownFuncs.Add   item_name
		case 6:   g_knownCmds.Add    item_name
		case 4,5: g_reserved.Add     item_name
		case 3:   g_controlFlow.Add  ControlFlowCasing(item_name)
	}
}

; Make sure each keyword is only in the first keyword set it appears in
;Set.FilterAll(g_controlFlow, g_reserved, g_knownFuncs, g_knownCmds, g_knownVars)
Set.FilterAll(g_controlFlow, g_reserved, g_knownFuncs, g_knownVars)
Set.FilterAll(g_controlFlow, g_reserved, g_knownCmds, g_knownVars)

props := "# This file is autogenerated by " A_ScriptName " - DO NOT UPDATE MANUALLY`n`n"
props .= "ahk1.keywords.directives=\`n"
props .= CreateKeywordList(g_directives) "`n"
props .= "ahk1.keywords.flow=\`n"
props .= CreateKeywordList(g_controlFlow) "`n"
props .= "ahk1.keywords.reserved=\`n"
props .= CreateKeywordList(g_reserved) "`n"
props .= "ahk1.keywords.known.vars=\`n"
props .= CreateKeywordList(g_knownVars) "`n"
props .= "ahk1.keywords.known.funcs=\`n"
props .= CreateKeywordList(g_knownFuncs) "`n"
props .= "ahk1.keywords.known.cmds=\`n"
props .= CreateKeywordList(g_knownCmds)

FileRewrite "ahk1.keywords.properties", props

api := CreateApiList(g_directives, "#")
api .= CreateApiList(g_controlFlow)
api .= CreateApiList(g_reserved)
api .= CreateApiList(g_knownVars)
api .= CreateApiList(g_knownFuncs)
api .= CreateApiList(g_knownCmds)

FileRewrite "ahk1.standard.api", api
